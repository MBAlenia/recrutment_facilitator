services:
  postgres:
    image: postgres:16
    container_name: ${COMPOSE_PROJECT_NAME}-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - app-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: ${COMPOSE_PROJECT_NAME}-backend
    restart: always
    depends_on:
      - postgres
    ports:
      - "${BACKEND_PORT}:3000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      PORT: ${BACKEND_PORT}
      RESET_SECRET: ${RESET_SECRET}
      NODE_ENV: ${NODE_ENV}
    volumes:
      - ./src:/app/src
      - backend_node_modules:/app/node_modules
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-backend.entrypoints=web"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-backend.loadbalancer.server.port=${BACKEND_PORT}"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: ${COMPOSE_PROJECT_NAME}-frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT}:8000"
    networks:
      - app-network
    command: npm run dev
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}.entrypoints=web"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=${FRONTEND_PORT}"

  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  backend_node_modules:
  frontend_node_modules:
